##################################################
#### SNAKEMAKE FILE: SEQUENCES ####
##################################################
# General Set Up
# config.yaml file contains the paths to the databases files 
# rule all starts the running of all the rules above for each dataset by calling the output of tha last rule
##################################################
configfile: "config.yaml"

rule all:
    input:
        expand("data/datasets/{sample}-seq.fa", sample=[
            "functional-protein-exon2", 
            "functional-protein-exon3", 
            "functional-lncrna-exon1", 
            "functional-lncrna-exon2", 
            "functional-short-ncrna", 
            "protein-exon2-negative-control", 
            "protein-exon3-negative-control", 
            "lncrna-exon1-negative-control", 
            "lncrna-exon2-negative-control", 
            "short-ncrna-negative-control"
        ])

##################################################
# Extract 1000 sequences for each type of RNA: protein coding exon 2 & 3, lncrna exon 1 & 2, short-ncrna; 
# and corresponding coordinates for negative control 
# Sequences are selected randomly filtering out:    
#       mitocondrial or Ychr RNA 
#       length XXXX 
#       number of exons: at least 2 for lncrna and protein-coding-rna 
#         - from chromosome Y and mitochrondia; 
# - with less than 4 exons 
# - with length sorter than 61 nt and longer than 272 nt  
# - with unknown nucleotides (N)  
##################################################

rule protein_coding_sequences:
    input: 
        genome_annotations=config["genome_annotations"],
        genome_seq=config["genome_seq"],
        protein_coding_refseq=config["protein_coding_refseq"]
        
    output:
        "data/datasets/functional-protein-exon2-dataset.csv",
        "data/datasets/functional-protein-exon3-dataset.csv",
        "data/datasets/protein-coords-negative-control.csv"
    
    shell:
        "scripts/A0-protein-coding-sequences.sh {input} > {output}"


rule lncrna_sequences:
	input: 
		rnacentral_coords=config["rnacentral_coords"],
		rnacentral_lncrna_seqs=config["rnacentral_lncrna_seqs"],
		genome_seq=config["genome_seq"],
		interaction_database=config["interaction_database"]

	output:
		"data/datasets/functional-lncrna-exon1-dataset.csv",
		"data/datasets/functional-lncrna-exon2-dataset.csv",
		"data/datasets/lncrna-coords-negative-control.csv"
        
	shell:
		"scripts/A1-lncRNA-sequences.sh {input} > {output}"


rule short_ncrna_sequences:
	input: 
		rnacentral_coords=config["rnacentral_coords"],
		rnacentral_short_ncrna_seqs=config["rnacentral_short_ncrna_seqs"],
		rnacentral_pre_mirna_seqs=config["rnacentral_pre_mirna_seqs"],
		genome_seq=config["genome_seq"],
		interaction_database=config["interaction_database"]

	output:
		"data/datasets/functional-short-ncrna-dataset.csv",
		"data/datasets/short-ncrna-coords-negative-control.csv"
    
	shell:
		"scripts/A2-short-ncRNA-sequences.sh {input} > {output}"    




##################################################
# Generate Negative control: 

#       - 2 separate rules to run the scripts on the datasets since short-ncrna outputs one file
#       while the protein-coding and lncrnas output two (due number of exons)

#       - Starting with the coordinates for negative control obtain with rule "sequences_processing",
#       10 sequences are extract for each functional sequence 1000, 5000, 10000, 50000, 100000, 500000, 1000000, 2500000 and 5000000  
#       nucleotides away upstream and downstream. Sequences with more than 5% ambiguos nucleotides and 
#       overlapping known genes are filter out 
# Both Swiss-Prot and GENCODE annotations are used to filter negative control sequences which overlap with annotated genes.  
# which was done using ```bedtools intersect``` (Haeussler et al., 2019; Harrow et al., 2012; Quinlan, 2014).
##################################################
rule negative_control_multiple_exons:
	input:
		initial_data="data/datasets/{sample_negative}-coords-negative-control.csv",
		genome_seq=config["genome_seq"],
		genes_complement=config["genes_complement"]
        
	output:
		"data/datasets/{sample_negative}-exonA-negative-control.csv",
		"data/datasets/{sample_negative}-exonB-negative-control.csv"

	params:
		sample_negative = ["protein", "lncrna"]

	shell:
		"scripts/A3-negative-control.sh {input} > {output}"

        

rule negative_control_single_exon:
    input:
        initial_data="data/datasets/short-ncrna-coords-negative-control.csv",
        genome_seq=config["genome_seq"],
        genes_complement=config["genes_complement"]
    
    output:
        "data/datasets/short-ncrna-negative-control-dataset.csv"
       
    shell:
        "scripts/A3-negative-control.sh {input} > {output}"


##################################################
# Rename lncrna and protein-rna negative control files to match corresponding functional dataset 
rule rename_negative_control_files:
	input:
		protein_exonA = "data/datasets/protein-exonA-negative-control.csv",
		protein_exonB = "data/datasets/protein-exonB-negative-control.csv",
		lncrna_exonA = "data/datasets/lncrna-exonA-negative-control.csv",
		lncrna_exonB = "data/datasets/lncrna-exonB-negative-control.csv"
    
	output:
		protein_exon2 = "data/datasets/protein-exon2-negative-control-dataset.csv",
		protein_exon3 = "data/datasets/protein-exon3-negative-control-dataset.csv",
		lncrna_exon1 = "data/datasets/lncrna-exon1-negative-control-dataset.csv",
		lncrna_exon2 = "data/datasets/lncrna-exon2-negative-control-dataset.csv"
    
	shell:
		"""
		mv {input.protein_exonA} {output.protein_exon2}
		mv {input.protein_exonB} {output.protein_exon3}
		mv {input.lncrna_exonA} {output.lncrna_exon1}
		mv {input.lncrna_exonB} {output.lncrna_exon2}
		"""


##################################################

# Generate functional FASTA file from CSV file
rule csv_to_fasta:
    input:
        csv="data/datasets/{sample}-dataset.csv"
    output:
        fasta="data/datasets/{sample}-seq.fa"
    
    shell:                                      
        """
        sed '1d' {input.csv} | while IFS=',' read -r id _ _ _ _ seq _; do 

            echo -e ">$id\n$seq" >> {output.fasta}
            
        done 
        """


##################################################

