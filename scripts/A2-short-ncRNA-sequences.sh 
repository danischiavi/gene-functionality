#!/bin/bash
#
# Script Name: non-coding-sequences.sh
#
# Author: Daniela Schiavinato
# Last edited: April 2024
#
# Description: 

#   - Generate Functional datasets: 
#                                 functional-short-ncrna, 
#                                 functional-lncrna-exon1, functional-lncrna-exon2, 
#
#   - Extracts coordinates to generate negative control dataset downstream using negative-control.sh:                     
#                                 lncrna-coords-negative-control,
#                                 short-ncrna-coords-negative-control
# 

###########################################################################################################################
#### GENERAL SETUP ####
###########################################################################################################################

##### Input files ##### 
rnacentral_coords=$1
rnacentral_short_ncrna_seqs=$2
rnacentral_pre_mirna_seqs=$3

#### Final Output files #####
# Functional datasets 
short_ncrna='data/datasets/functional-short-ncrna-dataset.csv'
# Coordenates for negative-control generation 
short_negative_control='data/datasets/short-ncrna-coords-negative-control.csv'

##### Temporary files ####
short_ncrna_unsorted='data/datasets/functional-short-ncrna-unsorted.csv'
short_negative_control_unsorted='data/datasets/short-ncrna-coords-negative-unsorted.csv'

##### Constrains ##### 
sample_size=1000                     # Number of sequences for each type of RNA 
lower_limit_short='71'               # Given by the size distribution analysis (10&90% percentile)
upper_limit_short='142'


###########################################################################################################################
#### FUNCTION DECLARATION ####
###########################################################################################################################

# Set variables to filter out ncRNA sequences from the RNAcentral database
set_variables() {                                         
    
    local id=$1
    local rnacentral_seq=$2
    
    seq=$(  grep -m 1 "$id" "$rnacentral_seq" | cut -f 2 )
    meta=$( grep -m 1 "$id" "$rnacentral_coords" )
                                       
    IFS=$'\t ' read -r chr zero_start end _ <<< "$meta"                                                 # zero_start: 0-start bed format  

    # Remove if no sequence available     
    if [ -n "$seq" ] && [ "$chr" != 'chrM' ] && [ "$chr" != 'chrY' ]; then                                  
                                                
        len=$(( end-zero_start ))  
            
        if [ "$len" -ge "$lower_limit_short" ] && [ "$len" -le "$upper_limit_short" ]; then  
           
            # add 1 to change coordinate from 0-start
            start=$((zero_start + 1))  

            # Add random id to selected_ids arrray to keep track                                                                  
            selected_ids+=("$random_id")
            short_count="${#selected_ids[@]}"

            # Output functional dataset
            echo "RNA$short_count,Yes,$chr,$start,$end,$seq" >> "$short_ncrna_unsorted"                                                 
            

            if [ "$start" -gt "$end" ]; then                                                            # Reverse transcripts can alter order of start/end positions
                
                echo "$chr,$end,$start,$len" >> "$short_negative_control_unsorted"

            else

                echo "$chr,$start,$end,$len" >> "$short_negative_control_unsorted"

            fi
        fi 
    fi
}

###########################################################################################################################
#### EXTRACT SEQUENCES ####
###########################################################################################################################

# Populate arrays with non-coding-sequences IDs column for searching within all ncrna RNAcentral database 
declare -a "IDs_ncrna=()"  
mapfile -t IDs_ncrna < <(cut -f 4 -d $'\t' "$rnacentral_coords")


if [ ! -s "$short_ncrna" ]; then 

    echo "ID,Functional,Chromosome,Start,End,Sequence" >> "$short_ncrna_unsorted"
    echo "Chromosome,Start,End,Length" >> "$short_negative_control_unsorted" 

    declare -a "IDs_short_ncrna=()"
    mapfile -t IDs_short_ncrna < <(cut -f 1 -d $'\t' "$rnacentral_short_ncrna_seqs" | awk '{print $1}')
    
    declare -a "IDs_pre_mirna=()"
    mapfile -t IDs_pre_mirna < <(cut -f 1 -d $'\t' "$rnacentral_pre_mirna_seqs" | awk '{print $1}')

    declare -a "selected_ids=()"
    short_count=0

    while [ "$short_count" -lt "$sample_size" ]; do

        short_leftover="${#IDs_short_ncrna[@]}"
    
        if [ "$short_leftover" -gt 0 ]; then

            random_id=$(printf "%s\n" "${IDs_short_ncrna[@]}" | shuf -n 1)

            # Find index of random id
            for index in "${!IDs_short_ncrna[@]}"; do                                                     
                if [[ "${IDs_short_ncrna[$index]}" == "$random_id" ]]; then
                    del_index=$index
                    break
                fi
            done

            # Remove random id from short_ncrna array to avoid repeats and make downstream selection faster 
            IDs_short_ncrna=( "${IDs_short_ncrna[@]:0:$del_index}" "${IDs_short_ncrna[@]:$((del_index + 1))}" )                                   
        
            if [[ "${IDs_ncrna[@]}" =~ "$random_id" ]]; then

                set_variables "$random_id" "$rnacentral_short_ncrna_seqs"
                     
            fi 

        else 

            random_id=$(printf "%s\n" "${IDs_pre_mirna[@]}" | shuf -n 1)
                                           
            if [[ ! " ${selected_ids[@]} " =~ " $random_id " ]]; then

                if [[ "${IDs_ncrna[@]}" =~ "$random_id" ]]; then

                    set_variables "$random_id" "$rnacentral_pre_mirna_seqs"
        
                fi
        
            fi
        fi    
    done
 
    # Sort sequences and remove temporary files 
    awk -F ',' 'NR > 1 {print $1}' "$short_ncrna_unsorted" > short-id-column
    awk -F ',' 'NR > 1 {print $2 "," $3 "," $4 "," $5 "," $6}' "$short_ncrna_unsorted" | sort -t ',' -k2,2 -k3,3n -k4,4n > short-sorted-columns
    (echo "ID,Functional,Chromosome,Start,End,Sequence"; paste -d ',' short-id-column short-sorted-columns) > "$short_ncrna"

    rm -rf short-id-column
    rm -rf short-sorted-columns
    rm -rf "$short_ncrna_unsorted"

    # Sort coordenates for negative control 
    awk 'NR == 1 {print $0; next} {print $0 | "sort -t, -k1,1 -k2,2n -k3,3n"}' "$short_negative_control_unsorted"  > "$short_negative_control" 

    rm -rf "$short_negative_control_unsorted" 

fi

